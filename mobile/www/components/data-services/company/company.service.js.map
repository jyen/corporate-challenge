{"version":3,"sources":["../../../../client/components/data-services/company/company.service.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;AAEb,CAAC,YAAY;QAEH,cAAc;;;AAEL,iBAFT,cAAc,CAEJ,SAAS,EAAE;kCAFrB,cAAc;;AAGZ,gBAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,oBAAoB,EAAE,IAAI,EAAE;AAClD,wBAAQ,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;aAC5B,CAAC,CAAC;SACN;;qBANC,cAAc;;mBAQJ,wBAAG;AACX,uBAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,QAAQ,CAChC,IAAI,CAAC,oBAAoB,CAAC,SACrB,CAAC,kBAAkB,CAAC,CAAC;;AAE/B,yBAAS,oBAAoB,CAAC,QAAQ,EAAE;AACpC,2BAAO,QAAQ,CAAC;iBACnB;;AAED,yBAAS,kBAAkB,GAAG,EAC7B;aACJ;;;mBAEY,uBAAC,OAAO,EAAE;AACnB,uBAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,QAAQ,CACtC,IAAI,CAAC,qBAAqB,CAAC,SACtB,CAAC,mBAAmB,CAAC,CAAC;;AAEhC,yBAAS,qBAAqB,CAAC,QAAQ,EAAE;AACrC,2BAAO,QAAQ,CAAC;iBACnB;;AAED,yBAAS,mBAAmB,GAAG,EAC9B;aACJ;;;mBAEY,uBAAC,OAAO,EAAE;AACnB,uBAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAC,EAAE,EAAE,OAAO,CAAC,GAAG,EAAC,EAAE,OAAO,CAAC,CAAC,QAAQ,CAC3D,IAAI,CAAC,qBAAqB,CAAC,SACtB,CAAC,mBAAmB,CAAC,CAAC;;AAEhC,yBAAS,qBAAqB,CAAC,QAAQ,EAAE;AACrC,2BAAO,QAAQ,CAAC;iBACnB;;AAED,yBAAS,mBAAmB,GAAG,EAC9B;aACJ;;;mBAES,oBAAC,EAAE,EAAE;AACX,uBAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAC,EAAE,EAAE,EAAE,EAAC,CAAC,CAAC,QAAQ,CACtC,IAAI,CAAC,kBAAkB,CAAC,SACnB,CAAC,gBAAgB,CAAC,CAAC;AAC7B,yBAAS,kBAAkB,CAAC,QAAQ,EAAE;AAClC,2BAAO,QAAQ,CAAC;iBACnB;;AAED,yBAAS,gBAAgB,GAAG,EAC3B;aAEJ;;;eA1DC,cAAc;;;AA4DpB,WAAO,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,OAAO,CAAC,gBAAgB,EAAE,cAAc,CAAC,CAAC;CACrF,CAAA,EAAG,CAAC","file":"company.service.js","sourcesContent":["'use strict';\n\n(function () {\n\n    class companyService {\n        /*@ngInject*/\n        constructor($resource) {\n            this.resource = $resource('/api/companies/:id', null, {\n                'update': {method: 'PUT'}\n            });\n        }\n\n        getCompanies() {\n            return this.resource.query().$promise\n                .then(getCompaniesComplete)\n                .catch(getCompaniesFailed);\n\n            function getCompaniesComplete(response) {\n                return response;\n            }\n\n            function getCompaniesFailed() {\n            }\n        }\n\n        createCompany(company) {\n            return this.resource.save(company).$promise\n                .then(createCompanyComplete)\n                .catch(createCompanyFailed);\n\n            function createCompanyComplete(response) {\n                return response;\n            }\n\n            function createCompanyFailed() {\n            }\n        }\n\n        updateCompany(company) {\n            return this.resource.update({id: company._id}, company).$promise\n                .then(updateCompanyComplete)\n                .catch(updateCompanyFailed);\n\n            function updateCompanyComplete(response) {\n                return response;\n            }\n\n            function updateCompanyFailed() {\n            }\n        }\n\n        getCompany(id) {\n            return this.resource.get({id: id}).$promise\n                .then(getCompanyComplete)\n                .catch(getCompanyFailed);\n            function getCompanyComplete(response) {\n                return response;\n            }\n\n            function getCompanyFailed() {\n            }\n\n        }\n    }\n    angular.module('corporateChallengeApp').service('companyService', companyService);\n})();\n"]}